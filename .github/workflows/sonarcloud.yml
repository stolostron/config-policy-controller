name: Sonarcloud scan

on:
  workflow_run:
    workflows:
      - KinD tests
    types:
      - completed

jobs:
  sonarcloud:
    runs-on: ubuntu-latest
    if: |
      github.repository_owner == 'stolostron' &&
      (github.event.workflow_run.event == 'push' || github.event.workflow_run.event == 'pull_request') &&
      github.event.workflow_run.conclusion == 'success'
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for all tags and branches
      - name: Checkout the triggering workflow commit
        run: |
          git fetch origin "+refs/pull/*/head:refs/remotes/origin/pr/*"
          git checkout ${{ github.event.workflow_run.head_commit.id }}
      - name: Download the coverage report
        uses: actions/github-script@v6
        with:
          # Taken from https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_run
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });

            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "coverage"
            })[0];

            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });

            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/coverage.zip`, Buffer.from(download.data));
      - name: Unzip coverage.zip
        run: unzip coverage.zip
      - name: SonarCloud Analysis
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            --debug
